# This is the way I'm distributing / resetting the database before each run.
# It's possible that a future version of testbot could automate this.

require 'ftools'

namespace :testbot do
  task :before_request do
    # Resets config.yml from config.yml.in
    # Will probably add ERB support later
    # system %{cat config/testbot.yml.in | ruby -e "STDIN.readlines.each { |line| puts line.gsub('USERNAME', ENV['USER']) }" > config/testbot.yml}
  end
  
  task :before_run do
    # Create database.yml
    database_yml = <<-DB_CONFIG
test:
  adapter: mysql
  encoding: utf8
  database: !APPNAME!_testbot_test<%= ENV['TEST_ENV_NUMBER'] %>
  username: root
  password:
  host: localhost
DB_CONFIG

    database_file_path = "config/database.yml"
    File.open(database_file_path, 'w') { |f| f.write(database_yml) }

    # Setup databases for all instances
    0.upto(ENV['TEST_INSTANCES'].to_i - 1) do |instance|
      test_env_number = (instance == 0) ? '' : instance + 1
      system "mysqladmin -u root -f drop !APPNAME!_testbot_test#{test_env_number}  > /dev/null 2>&1"
      system "mysqladmin -u root -f create !APPNAME!_testbot_test#{test_env_number} > /dev/null 2>&1"
      system "export RAILS_ENV=test; export TEST_ENV_NUMBER=#{test_env_number}; rake db:test:load"
    end

    # Build gems
    system "rm vendor/gems/*/ext/**/*.o > /dev/null 2>&1"
    system "rake gems:build:force > /dev/null 2>&1"
  end
end
